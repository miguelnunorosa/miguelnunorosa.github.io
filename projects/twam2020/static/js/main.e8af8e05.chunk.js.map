{"version":3,"sources":["pages/sitestruct/footer/Footer.js","pages/sitestruct/navigationbar/NavigationBar.js","pages/home/Home.js","services/const.js","pages/novidades/CoversRow.js","pages/sitestruct/movieDetails/MovieDetails.js","pages/sitestruct/modal/Modal.js","pages/filmes/Filmes.js","pages/novidades/Novidades.js","pages/quemsomos/QuemSomos.js","pages/sitestruct/PageStruct.js","serviceWorker.js","index.js"],"names":["Footer","className","exact","to","Component","NavigationBar","id","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Home","API_BASE_URL","API_KEY","CoversRow","state","movieDetailShow","cssshow","oncover_click","bind","this","props","onclickcover","movie","src","poster_src","width","alt","title","onClick","MovieDetails","ref","page","movieobj","original_title","release_date","overview","onclickbacktofilms","Filmes","genres","films","modalShow","showDetailPage","selectedDetailMovie","onclickmovie","onclickback","getOptionSelected","categoriesApi","Axios","get","then","data","setState","find","x","parseInt","key","e","target","value","results","coverRows","forEach","poster_path","movieRow","push","onChange","map","name","Novidades","showCovers","rows","$","ajax","url","success","searchResults","console","log","error","xhr","status","err","QuemSomos","rel","PageStruct","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6bAyBeA,G,6KAbP,OACI,yBAAKC,UAAU,UACX,4BACI,4BAAI,kBAAC,IAAD,CAASA,UAAU,oBAAoBC,OAAK,EAACC,GAAG,KAAhD,qBACJ,4BAAI,kBAAC,IAAD,CAASF,UAAU,oBAAoBC,OAAK,EAACC,GAAG,KAAhD,cACJ,4BAAI,kBAAC,IAAD,CAASF,UAAU,oBAAoBC,OAAK,EAACC,GAAG,cAAhD,uB,GAZHC,cCmDNC,G,6KA3CP,OACI,yBAAKJ,UAAU,uCAEX,yBAAKK,GAAG,cAEJ,yBAAKL,UAAU,MAAMK,GAAG,wBACpB,yBAAKL,UAAU,YACX,uBAAGA,UAAU,WAAWM,KAAK,KAA7B,OAEJ,yBAAKN,UAAU,YACX,uBAAGA,UAAU,WAAWM,KAAK,KAA7B,QAIR,yBAAKN,UAAU,MAAMK,GAAG,sBACpB,yBAAKL,UAAU,YACX,kBAAC,IAAD,CAASA,UAAU,oBAAoBC,OAAK,EAACC,GAAG,KAAhD,SAGJ,yBAAKF,UAAU,YACX,kBAAC,IAAD,CAASA,UAAU,oBAAoBE,GAAG,cAA1C,cAGJ,yBAAKF,UAAU,YACX,kBAAC,IAAD,CAASA,UAAU,oBAAoBE,GAAG,WAA1C,WAGJ,yBAAKF,UAAU,YACX,kBAAC,IAAD,CAASA,UAAU,oBAAoBE,GAAG,KAA1C,gBAKZ,4BAAQF,UAAU,iBAAiBO,KAAK,SAASC,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC1J,0BAAMZ,UAAU,8B,GA1CRG,cC8BbU,G,6KAvBP,OACI,6BAEI,iDAEA,6BACI,qHAGJ,yBAAKR,GAAG,eACJ,uBAAGA,GAAG,MAAN,4HAGJ,6BACI,uBAAGA,GAAG,MAAN,qG,GAtBDF,c,wBCHNW,EAAe,+BACfC,EAAU,mCCmGRC,G,8DA1FX,aAAe,IAAD,8BACV,gBAGKC,MAAQ,CAITC,iBAAiB,EACjBC,QAAS,IAIb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAbX,E,yGAoDVC,KAAKC,MAAMC,aAAaF,KAAKC,MAAME,MAAMpB,M,+BAuBzC,OACI,oCACI,yBAAKL,UAAU,iCACX,yBAAK0B,IAAKJ,KAAKC,MAAME,MAAME,WAAaC,MAAM,MAAMC,IAAKP,KAAKC,MAAME,MAAMK,MACrE9B,UAAU,aAAc+B,QAAST,KAAKF,sB,GArFvCjB,cCuDT6B,GC1DK7B,Y,wDDQhB,WAAYoB,GAAQ,uCACVA,G,kGAgBA,IAAD,OACL,OACI,6BAEI,yBAAKvB,UAAW,QAASiC,IAAK,SAAAC,GAAI,OAAG,EAAKA,KAAOA,GAAM7B,GAAG,mBACtD,wBAAIL,UAAU,eAAesB,KAAKC,MAAMY,SAASZ,MAAME,MAAMW,gBAE7D,yBAAKpC,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAK0B,IAAKJ,KAAKC,MAAMY,SAASZ,MAAME,MAAME,WAAYC,MAAM,MAAMC,IAAKP,KAAKC,MAAMY,SAASZ,MAAME,MAAMK,MAAO9B,UAAU,gBAG5H,yBAAKA,UAAU,yBACX,+BAAI,+CAA0BsB,KAAKC,MAAMY,SAASZ,MAAME,MAAMK,MAAM,6BAChE,wDAAmCR,KAAKC,MAAMY,SAASZ,MAAME,MAAMW,eAAe,6BAClF,kDAAgCd,KAAKC,MAAMY,SAASZ,MAAME,MAAMY,aAFpE,KAIA,2BAAG,6CAA0B,6BAAOf,KAAKC,MAAMY,SAASZ,MAAME,MAAMa,UAEpE,4BAAQtC,UAAU,eAAe+B,QAAST,KAAKC,MAAMgB,oBAArD,UACA,4BAAQvC,UAAU,mBAAlB,eAIR,oC,GAhDOG,cEONqC,E,kDAKjB,aAAe,IAAD,8BACV,gBAGKvB,MAAQ,CACTwB,OAAQ,GACRC,MAAO,GACPC,WAAW,EACXC,gBAAgB,EAChBC,oBAAoB,IAGxB,EAAKC,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAK0B,YAAc,EAAKA,YAAY1B,KAAjB,gBACnB,EAAK2B,kBAAoB,EAAKA,kBAAkB3B,KAAvB,gBAdf,E,gEAsBO,IAAD,OACZ4B,EAAa,UAAMnC,EAAN,qCAA+CC,EAA/C,qBJnCD,SIqChBmC,IAAMC,IAAIF,GACLG,MAAK,YAAe,IACTX,EADQ,EAAXY,KACGZ,OAER,EAAKa,SAAS,CAAEb,gB,mCAWfpC,GACT,IAAIoB,EAAQH,KAAKL,MAAMyB,MAAMa,MAAK,SAAAC,GAAC,OAAIC,SAASD,EAAEE,OAASrD,KAG3DiB,KAAKgC,SAAS,CACVV,gBAAgB,EAChBC,oBAAqBpB,M,oCASzBH,KAAKgC,SAAS,CACVV,gBAAgB,M,wCASNe,GAAI,IAAD,OACbV,EAAgBnC,EAAe,yBAA2BC,EAAU,UAAY4C,EAAEC,OAAOC,MAAzE/C,yBAEpBoC,IAAMC,IAAIF,GACLG,MAAM,YAAe,IACZU,EADW,EAAXT,KACeS,QACjBC,EAAY,GAEhBD,EAAQE,SAAS,SAACvC,GACdA,EAAME,WJzFM,kCIyF0BF,EAAMwC,YAC5C,IAAMC,EAAW,kBAAC,EAAD,CAAWR,IAAKjC,EAAMpB,GAAIoB,MAAOA,EAAOD,aAAc,EAAKsB,eAE5EiB,EAAUI,KAAKD,MAGnB,EAAKZ,SAAS,CAAEZ,MAAOqB,S,+BASzB,IACEtB,EAAWnB,KAAKL,MAAhBwB,OAER,OAAGnB,KAAKL,MAAM2B,eACF,kBAAC,EAAD,CAAcT,SAAUb,KAAKL,MAAM4B,oBACrBN,mBAAoBjB,KAAKyB,cAI3C,6BACI,gDACA,iHACA,4BAAQ/C,UAAU,0CAA0CK,GAAG,oBAAoB+D,SAAU9C,KAAK0B,mBAC7FP,EAAO4B,KAAK,gBAAGhE,EAAH,EAAGA,GAAIiE,EAAP,EAAOA,KAAP,OACT,4BAAQZ,IAAKrD,EAAIA,GAAIA,EAAIwD,MAAOS,GAAhC,IAAwCA,EAAxC,SAIR,6BACA,yBAAKtE,UAAU,OACVsB,KAAKL,MAAMyB,OAXpB,S,GAvGoBvC,a,iBCmGrBoE,E,kDA9FX,WAAYhD,GAAO,IAAD,8BACd,cAAMA,IACDN,MAAQ,GAEb,EAAK6B,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAK0B,YAAc,EAAKA,YAAY1B,KAAjB,gBAEnB,EAAKmD,aAPS,E,yDAgBLnE,GACT,IAAIoB,EAAQH,KAAKL,MAAMwD,KAAKlB,MAAK,SAAAC,GAAC,OAAIC,SAASD,EAAEE,OAASrD,KAE1DiB,KAAKgC,SAAS,CACVV,gBAAgB,EAChBC,oBAAqBpB,M,oCASzBH,KAAKgC,SAAS,CACVV,gBAAgB,M,mCAQX,IAAD,OAGR,IACI8B,IAAEC,KAAK,CACHC,IAAK9D,EAAe,8BAAgCC,EAA/CD,yBACL+D,QAAS,SAACC,GACNC,QAAQC,IAAI,uBACZ,IAAMlB,EAAUgB,EAAchB,QAC1BC,EAAY,GAEhBD,EAAQE,SAAS,SAACvC,GACdA,EAAME,WLlEE,kCKkE8BF,EAAMwC,YAC5C,IAAMC,EAAW,kBAAC,EAAD,CAAWR,IAAKjC,EAAMpB,GAAIoB,MAAOA,EAAOD,aAAc,EAAKsB,eAE5EiB,EAAUI,KAAKD,MAGnB,EAAKZ,SAAS,CAAEmB,KAAMV,KAE1BkB,MAAO,SAACC,EAAKC,EAAQC,GACjBL,QAAQE,MAAM,sCAGzB,MAAMtB,GACHoB,QAAQC,IAAIrB,M,+BAWhB,OAAGrC,KAAKL,MAAM2B,eACF,kBAAC,EAAD,CAAcT,SAAUb,KAAKL,MAAM4B,oBACrBN,mBAAoBjB,KAAKyB,cAI3C,6BACI,mDACA,uFACA,yBAAK/C,UAAU,OACVsB,KAAKL,MAAMwD,W,GA3FZtE,aCLHkF,G,6KAQb,OACI,6BAEI,4CAEA,yBAAKrF,UAAU,eACX,qDAA0B,+CAA1B,mBAGJ,yBAAKA,UAAU,eACX,4BACI,4BAAI,+CAAJ,0CACA,4BAAI,0CAAJ,8CACA,4BAAI,2CAAJ,mFAIR,yBAAKA,UAAU,mBACX,oEAAyC,uBAAGM,KAAK,4BAA4BsD,OAAO,SAAS0B,IAAI,uBAAxD,iBAAzC,KACA,0DAA+B,uBAAGhF,KAAK,kDAAkDsD,OAAO,SAAS0B,IAAI,uBAA9E,uBAA/B,W,GA3BmBnF,cCyCxBoF,G,6KAxBP,OACI,yBAAKvF,UAAU,WACX,yBAAKA,UAAU,mBACX,yEAGJ,kBAAC,IAAD,KACI,kBAAC,EAAD,MADJ,IAGI,yBAAKA,UAAU,WAAf,IACI,kBAAC,IAAD,CAAOC,OAAK,EAACuF,KAAK,IAAIC,UAAW5E,IACjC,kBAAC,IAAD,CAAOZ,OAAK,EAACuF,KAAK,UAAUC,UAAWjD,IACvC,kBAAC,IAAD,CAAOvC,OAAK,EAACuF,KAAK,aAAaC,UAAWlB,IAC1C,kBAAC,IAAD,CAAOtE,OAAK,EAACuF,KAAK,aAAaC,UAAWJ,KAI9C,kBAAC,EAAD,Y,GAxBKlF,cCFLuF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAEL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLF,QAAQE,MAAMA,EAAMwB,c","file":"static/js/main.e8af8e05.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport './footer.css';\n\n\nclass Footer extends Component {\n\n    /**\n     * This method render the information with HTML code\n     * @returns Return page information inside HTML\n     */\n    render() {\n        return(\n            <div className=\"footer\">\n                <ul>\n                    <li><NavLink className=\"nav-item nav-link\" exact to=\"/\">Apoio Técnico</NavLink></li>\n                    <li><NavLink className=\"nav-item nav-link\" exact to=\"/\">Contactos</NavLink></li>\n                    <li><NavLink className=\"nav-item nav-link\" exact to=\"/quemsomos\">Sobre Nós</NavLink></li>\n                </ul>\n            </div>\n        );\n    }\n\n}\n\nexport default Footer;\n","import React, {Component} from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport './navigationBar.css';\n\n\nclass NavigationBar extends Component {\n\n\n    /**\n     * This method render the information with HTML code\n     * @returns Return page information inside HTML\n     */\n    render() {\n        return(\n            <nav className=\"navbar navbar-expand-lg navbar-dark\" >\n\n                <div id=\"mainNavBar\">\n\n                    <div className=\"row\" id=\"navRightTopLanguages\">\n                        <div className=\"col-sm-1\">\n                            <a className=\"nav-link\" href=\"/\">PT</a>\n                        </div>\n                        <div className=\"col-sm-1\">\n                            <a className=\"nav-link\" href=\"/\">EN</a>\n                        </div>\n                    </div>\n\n                    <div className=\"row\" id=\"navRightMenuOption\">\n                        <div className=\"col-sm-2\">\n                            <NavLink className=\"nav-item nav-link\" exact to=\"/\">Home</NavLink>\n                        </div>\n\n                        <div className=\"col-sm-3\">\n                            <NavLink className=\"nav-item nav-link\" to=\"/novidades\">Novidades</NavLink>\n                        </div>\n\n                        <div className=\"col-sm-2\">\n                            <NavLink className=\"nav-item nav-link\" to=\"/filmes\">Filmes</NavLink>\n                        </div>\n\n                        <div className=\"col-sm-2\">\n                            <NavLink className=\"nav-item nav-link\" to=\"/\">Favoritos</NavLink>\n                        </div>\n                    </div>\n                </div>\n\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mainNavBar\" aria-controls=\"mainNavBar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"/>\n                </button>\n\n            </nav>\n        );\n    }\n\n}\n\nexport default NavigationBar;\n","import React, {Component} from \"react\";\nimport './home.css';\n\n\nclass Home extends Component{\n\n\n    /**\n     * This method render the information with HTML code\n     * @returns Return page information inside HTML\n     */\n    render(){\n        return(\n            <div>\n\n                <h1>Página Inicial</h1>\n\n                <div>\n                    <p>Aceda sem limites a séries e filmes. Veja em qualquer lugar. Cancele quando quiser</p>\n                </div>\n\n                <div id=\"homeMainDiv\">\n                    <p id=\"p2\">Veja no seu televisor. Utilize uma Smart TV, Playstation, Xbox, Chromecast, Android TV, Apple TV e leitores de Blu-ray.</p>\n                </div>\n\n                <div>\n                    <p id=\"p3\">Passe o seu tempo livre com a melhor seleção do mundo cinematográfico na sua casa!</p>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","export const MOVIE_POSTER_URL = 'https://image.tmdb.org/t/p/w500'; //url used by API (the movie database) to show the movies cover/poster\nexport const API_BASE_URL = 'https://api.themoviedb.org/3';        //API base url\nexport const API_KEY = '4c9b18dcf47080054604596b7e94ce80';         //API authentication key\nexport const LANGUAGE = 'pt-PT';                                   //change the language of movie (title and details) to portuguese\n\n\n","import React, {Component} from \"react\";\nimport './novidades.css';\n//import Modal from '../sitestruct/modal/Modal';\n//import MovieDetails from \"../sitestruct/movieDetails/MovieDetails\";\n\nclass CoversRow extends Component{\n\n\n    /**\n     * Class constructor\n     */\n    constructor() {\n        super();\n\n        //schedules an update to a component state object. When state changes, the component responds rendering itself\n        this.state = {\n            /*modalShow: false,\n            cssshow: ''*/\n\n            movieDetailShow: false,\n            cssshow: ''\n        };\n\n        //this.onclickFilmDetail = this.onclickFilmDetail.bind(this);\n        this.oncover_click = this.oncover_click.bind(this);            //click action: show selected movie details (new page)\n        //this.closeModal = this.closeModal.bind(this);                  //click action: close the opened modal\n    }\n\n\n    /**\n    * This method runs after the component output has been rendered to the DOM.\n    */\n    componentDidMount() {\n    }\n\n\n    /**\n     * Method to open movie details\n     */\n    /*onclickFilmDetail(){\n\n        this.setState({\n            /!*pageShow: true,\n            cssshow:'show-modal',\n            pagetitle:this.props.movie.title,\n            pagecover: this.props.movie.poster_src,\n            pageoverview: this.props.movie.overview,*!/\n\n            modalShow: false,\n            cssshow:'',\n            modaltitle:this.props.movie.title,\n            modalcover: this.props.movie.poster_src,\n            modalmovieoriginaltitle: this.props.movie.original_title,\n            modalmoviereleasedate: this.props.movie.release_date,\n            modalbody:this.props.movie.overview\n        });\n    }*/\n\n\n    /**\n     * Method to add click action to movies cover. Movie opened through movie ID\n     */\n    oncover_click(){\n        this.props.onclickcover(this.props.movie.id);\n    }\n\n\n    /**\n     * Close modal (old!)\n     */\n    /*closeModal(){\n        this.setState({\n            modalShow: false,\n            cssshow:'',\n\n            /!*pageShow: false,\n            cssshow: '',*!/\n        });\n    }*/\n\n\n    /**\n     * This method render the information (data from previous functions) with HTML code\n     * @returns Return page information inside HTML\n     */\n    render() {\n        return(\n            <>\n                <div className=\"row-cols-md-1 filme-container\" >\n                    <img src={this.props.movie.poster_src}  width=\"300\" alt={this.props.movie.title}\n                         className=\"img-margin\"  onClick={this.oncover_click}\n                    />\n                </div>\n            </>\n        );\n    }\n\n\n}\n\n\nexport default CoversRow;\n","import React, {Component} from \"react\";\nimport './movieDetails.css';\n\nclass MovieDetails extends Component {\n\n    /**\n     * Class constructor\n     *\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n    }\n\n\n    /**\n     * This method runs after the component output has been rendered to the DOM.\n     */\n    componentDidMount() {\n        //debugger;  //allow debugging code\n    }\n\n\n    /**\n     * This method render the information (data from previous functions) with HTML code\n     * @returns Return page information inside HTML\n     */\n    render() {\n        return (\n            <div>\n\n                <div className={'page '} ref={page=> this.page = page} id=\"filmeDetailPage\">\n                    <h1 className=\"modal-title\">{this.props.movieobj.props.movie.original_title}</h1>\n\n                    <div className=\"row\">\n                        <div className=\"col-sm-4a\">\n                            <img src={this.props.movieobj.props.movie.poster_src} width=\"300\" alt={this.props.movieobj.props.movie.title} className=\"img-margin\" />\n                        </div>\n\n                        <div className=\"col-sm-8 movieDetails\">\n                            <p> <strong>Título: </strong>{this.props.movieobj.props.movie.title}<br />\n                                <strong>Título Original: </strong>{this.props.movieobj.props.movie.original_title}<br />\n                                <strong>Data estreia: </strong>{this.props.movieobj.props.movie.release_date} </p>\n\n                            <p><strong>Sinopse: </strong><br />{this.props.movieobj.props.movie.overview}</p>\n\n                            <button className=\"btn btn-info\" onClick={this.props.onclickbacktofilms}>Voltar</button>\n                            <button className=\"btn btn-success\">Ver filme</button>\n                        </div>\n                    </div>\n\n                    <div>\n\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\nexport default MovieDetails;\n","import React, {Component} from \"react\";\n\nclass Modal extends Component {\n\n\n    /**\n     * Class constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.onCloseModal = this.onCloseModal.bind(this);\n    }\n\n\n    /**\n     * This method runs after the component output has been rendered to the DOM.\n     */\n    componentDidMount() { }\n\n\n    /**\n     * Method to close modal\n     */\n    onCloseModal(){\n        this.props.closemodal();\n        //e.target.closest('.modal').classList.remove('show-modal');\n    }\n\n\n    /**\n     * This method render the information (data from previous functions) with HTML code\n     *\n     * @returns page with information inside HTML\n     */\n    render() {\n        if(!this.props.show){\n            return null;\n        }\n        return (\n            <div>\n                <div className={'modal ' + this.props.cssclassshow} ref={modal=> this.modal = modal} id=\"filmeDetailModal\" tabIndex=\"-1\" role=\"dialog\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-header\">\n                                <h1 className=\"modal-title\">\n                                    <span>{this.props.modaltitle}</span>\n                                </h1>\n                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div className=\"modal-body\">\n                                <span>{this.props.modalcover}</span> <br />\n                                <p>{this.props.modalbody}</p>\n                                <hr />\n                                <p><strong>Título Original: </strong>{this.props.modalmovieoriginaltitle}</p>\n                                <p><strong>Data Lançamento: </strong>{this.props.modalmoviereleasedate}</p><br />\n\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type=\"button\" className=\"btn btn-success\" data-dismiss=\"modal\" >Ver Filme</button>\n                                <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" onClick={this.onCloseModal}>Fechar</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Modal;\n","import React, { Component } from \"react\";\nimport Axios from \"axios\";\n\nimport {API_BASE_URL, API_KEY, LANGUAGE, MOVIE_POSTER_URL} from \"../../services/const\";\nimport './filmes.css';\nimport CoversRow from '../novidades/CoversRow';\nimport Modal from '../sitestruct/modal/Modal';\nimport MovieDetails from \"../sitestruct/movieDetails/MovieDetails\";\n\n\nexport default class Filmes extends Component {\n\n    /**\n     * Class constructor\n     */\n    constructor() {\n        super();\n\n        //schedules an update to a component state object. When state changes, the component responds rendering itself\n        this.state = {\n            genres: [],              //array to store movies genres (categories)\n            films: [],               //array to store detais from movie\n            modalShow: false,        //\"boolean\" variable to control if we want to show/hide the details modal\n            showDetailPage: false,   //\"boolean\" variable to control if we want to show/hide the details page\n            selectedDetailMovie:{}   //selected movie data\n        };\n\n        this.onclickmovie = this.onclickmovie.bind(this);             //Image click action. Open movie dedtailf from movie ID\n        this.onclickback = this.onclickback.bind(this);               //Allow to user go back to previous page\n        this.getOptionSelected = this.getOptionSelected.bind(this);   //to select an option from dropdown\n\n    }\n\n\n    /**\n     * This method runs after the component output has been rendered to the DOM.\n     */\n    componentDidMount() {\n        let categoriesApi = `${API_BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=${LANGUAGE}`;  //url request to API\n\n        Axios.get(categoriesApi)                  //from url, get data\n            .then(({ data }) => {\n                const { genres } = data;          //save on genres variable content of data (from API)\n\n                this.setState({ genres } ); //change the components state\n            });\n    }\n\n\n\n    /**\n     * This method open the details page of selected movie\n     *\n     * @param id: Movie ID\n     */\n    onclickmovie(id){\n        var movie = this.state.films.find(x => parseInt(x.key) === id);  //get movie ID and compare with selected movie ID\n\n        //change the components state\n        this.setState({\n            showDetailPage: true,       //set the boolean var to true to open the details page\n            selectedDetailMovie: movie  //If want open details page, this var (movie) carries all information about selected movie\n        });\n    }\n\n\n    /**\n     * This method allow to user go to previous page\n     */\n    onclickback(){\n        this.setState({\n            showDetailPage: false   //set the boolean var to false to close the details page\n        });\n    }\n\n\n\n    /**\n     * This method get the value of selected option from dropdown\n     */\n    getOptionSelected(e) {\n        let categoriesApi = API_BASE_URL + '/search/multi?api_key=' + API_KEY + '&query=' + e.target.value + '&language=' + LANGUAGE + '&page=1';  //url request to API\n\n        Axios.get(categoriesApi)\n            .then( ({ data }) => {\n                const results = data.results;    //get all raw results and store on var results\n                var coverRows = [];              //this var coverRows is an array to store all movie covers\n\n                results.forEach( (movie) => {                                                                  //for each results do:\n                    movie.poster_src = MOVIE_POSTER_URL + movie.poster_path;                                       //get the image url from API and append to another url to show image\n                    const movieRow = <CoversRow key={movie.id} movie={movie} onclickcover={this.onclickmovie} />   //\"send\" to component CoversRow all covers with on click event\n\n                    coverRows.push(movieRow);                                                                      //store on array, all movie covers\n                });\n\n                this.setState({ films: coverRows }); //element (rows) for the \"render\"\n            });\n    }\n\n\n    /**\n     * This method render the information (data from previous functions) with HTML code\n     * @returns Return page information inside HTML\n     */\n    render() {\n        const { genres } = this.state;\n\n        if(this.state.showDetailPage){\n            return (<MovieDetails movieobj={this.state.selectedDetailMovie}     /* this state have all information about selected movie */\n                                  onclickbacktofilms={this.onclickback}         /* image click event: call the function onclickback from component MovieDetails */\n            />);\n        }else{\n            return (\n                <div>\n                    <h1>Página Filmes</h1>\n                    <p>Seleccione uma categoria que deseja, seleccione um filme do seu agrado e desfrute!</p>\n                    <select className=\"form-control mt-4 col-md-2 col-offset-4\" id=\"categorySelectBox\" onChange={this.getOptionSelected}>\n                        {genres.map( ({ id, name }) => (\n                            <option key={id} id={id} value={name}> {name} </option>\n                        ))}\n                    </select>\n\n                    <hr/>\n                    <div className=\"row\">\n                        {this.state.films}\n                    </div>\n\n                    {/*<Modal show={this.state.modalShow}/>*/} {/*Show modal with selected movie*/}\n                    {/* <MovieDetails show={this.state.movieDetailShow} /> */}\n                </div>\n            );\n        }\n    }\n}\n","import React, {Component} from \"react\";\nimport {API_BASE_URL, API_KEY, LANGUAGE, MOVIE_POSTER_URL} from \"../../services/const\";\nimport CoversRow from './CoversRow';\nimport $ from 'jquery';\nimport './novidades.css';\nimport MovieDetails from \"../sitestruct/movieDetails/MovieDetails\";\n\n\n\nclass Novidades extends Component{\n\n    /**\n     * Class constructor\n     * @param props\n     */\n    constructor(props){\n        super(props);\n        this.state = {} //schedules an update to a component state object. When state changes, the component responds rendering itself\n\n        this.onclickmovie = this.onclickmovie.bind(this); //button action: show selected movie details (new page)\n        this.onclickback = this.onclickback.bind(this);   //button action: go back (to previous page: Novidades or Filmes)\n\n        this.showCovers();\n    }\n\n\n    /**\n    * This method open selected movie from list and show the cover and details\n    *\n    * @param: id (movie ID)\n    */\n    onclickmovie(id){\n        var movie = this.state.rows.find(x => parseInt(x.key) === id);    //convert to string movie ID to return the movie (something like \"where\" from mySQL)\n\n        this.setState({\n            showDetailPage: true,       //set the boolean var to true to open the details page\n            selectedDetailMovie: movie  //If want open details page, this var (movie) carries all information about selected movie\n        });\n    }\n\n\n    /**\n    * This method allow to user return to previous page (to Novidades or Filmes, depends where user select film to show details)\n    */\n    onclickback(){\n        this.setState({\n            showDetailPage: false      //set the boolean var to false to close the details page\n        });\n    }\n\n\n    /**\n    * This method requires API all latest movies, store all information and show the movies covers to user select one to see\n    */\n    showCovers(){\n\n        //jQuery syntax\n        try{\n            $.ajax({\n                url: API_BASE_URL + '/movie/now_playing?api_key=' + API_KEY + '&language=' + LANGUAGE + '&page=1',  //url request to API\n                success: (searchResults) => {\n                    console.log(\"Fetch data from API\");\n                    const results = searchResults.results;    //get all raw results and store on var results\n                    var coverRows = [];                       //this var coverRows is an array to store all movie covers\n\n                    results.forEach( (movie) => {                                                                  //for each results do:\n                        movie.poster_src = MOVIE_POSTER_URL + movie.poster_path;                                      //get the image url from API and append to another url to show image\n                        const movieRow = <CoversRow key={movie.id} movie={movie} onclickcover={this.onclickmovie} />  //\"send\" to component CoversRow all covers with on click event\n\n                        coverRows.push(movieRow);                                                                     //store on array, all movie covers\n                    });\n\n                    this.setState({ rows: coverRows }); //element (rows) for the \"render\"\n                },\n                error: (xhr, status, err) => {\n                    console.error(\"Failed to try fetching API data\");\n                }\n            });\n        }catch(e){\n            console.log(e);\n        }\n\n    }\n\n\n    /**\n     * This method render the information (data from previous functions) with HTML code\n     * @returns Return page information inside HTML\n     */\n    render(){\n        if(this.state.showDetailPage){\n            return (<MovieDetails movieobj={this.state.selectedDetailMovie}   /* this state have all information about selected movie */\n                                  onclickbacktofilms={this.onclickback}       /* image click event: call the function onclickback from component MovieDetails */\n            /> );\n        }else{\n            return(\n                <div>\n                    <h1>Página Novidades</h1>\n                    <p>Seleccione um filme que deseja ver, senta-te e desfruta!</p>\n                    <div className=\"row\">\n                        {this.state.rows}\n                    </div>\n                </div>\n            );\n        }\n    }\n\n}\n\nexport default Novidades;\n","import React, { Component } from \"react\";\nimport './quemSomos.css';\n\n\nexport default class QuemSomos extends Component{\n\n\n    /**\n     * This method render the information with HTML code\n     * @returns Return page information inside HTML\n     */\n    render(){\n        return(\n            <div>\n\n                <h1>Sobre Nós</h1>\n\n                <div className=\"aboutAuthor\">\n                    <p>Trabalho realizado por <strong>Miguel Rosa</strong> (Nº 6219).</p>\n                </div>\n\n                <div className=\"aboutSchool\">\n                    <ul>\n                        <li><strong>Disciplina:</strong> Tecnologias Web e Ambientes Móveis</li>\n                        <li><strong>Curso:</strong> Licenciatura em Engenharia Informática</li>\n                        <li><strong>Escola:</strong> Instituto Politécnico de Beja - Escola Superior de Tecnologia e Gestão</li>\n                    </ul>\n                </div>\n\n                <div className=\"aboutValidation\">\n                    <p>O HTML deste projeto foi validado por <a href=\"https://validator.w3.org/\" target=\"_blank\" rel=\"noopener noreferrer\">W3C Validator</a>.</p>\n                    <p>Acessibilidade validada por <a href=\"http://accessmonitor.acessibilidade.gov.pt/amp/\" target=\"_blank\" rel=\"noopener noreferrer\">Access Monitor Plus</a>.</p>\n                </div>\n\n\n            </div>\n        );\n    }\n\n}\n","import React, { Component } from \"react\";\nimport { Route, HashRouter } from \"react-router-dom\";\n\nimport Footer from \"./footer/Footer\";\nimport NavigationBar from \"./navigationbar/NavigationBar\";\n\nimport Home from \"../home/Home\";\nimport Filmes from \"../filmes/Filmes\";\nimport Novidades from \"../novidades/Novidades\";\nimport QuemSomos from \"../quemsomos/QuemSomos\";\n\nimport \"./pageStruct.css\";\n\n\nclass PageStruct extends Component {\n\n    /**\n     * This method render the information (data from previous functions) with HTML code\n     * @returns Return page information inside HTML\n     */\n    render() {\n        return(\n            <div className=\"mainApp\">\n                <div className=\"projectNameLeft\">\n                    <h1>Filmes e Séries - Conteúdos Online</h1>\n                </div>\n\n                <HashRouter>\n                    <NavigationBar /> {/* Insert/Add the navigation bar */}\n\n                    <div className=\"content\"> {/* Place where all the information show */}\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/filmes\" component={Filmes} />\n                        <Route exact path=\"/novidades\" component={Novidades} />\n                        <Route exact path=\"/quemsomos\" component={QuemSomos} />\n\n                    </div>\n\n                    <Footer />\n                </HashRouter>\n            </div>\n        );\n    }\n}\n\nexport default PageStruct;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min';\nimport 'bootstrap/dist/js/bootstrap.min';\n\nimport './index.css';\nimport PageStruct from \"./pages/sitestruct/PageStruct\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <PageStruct />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}